---
layout: post
title:  "What are P and NP?"
date:   2015-11-03 20:17:44 -0800
categories: math quantum
---

This first post will work through some of the exercises in Chapter 6 of
*Quantum Computing Since Democritus*, entitled "P, NP, and Friends".
Unfortunately for my readers, I worked through Chapters 1 through 5 before
MaBloWriMo.

This post assumes that the notion of a Turing machine has been defined. We will
start with the definitions of complexity classes \\(P\\) and \\(NP\\). In
contrast to Professor Aaronson, I will motivate the definitions of these two
complexity classes by first defining \\(P\\) and \\(NP\\) languages (i.e., sets
of strings of symbols in some alphabet). We will prove a convenient lemma that
will allow us to talk about the complexity class \\(NP\\) without resorting to
the notion of a nondeterministic Turing machine. This lemma was shown to me
in Professor Ryan Williams' computational complexity class, CS154, which I
took in the winter quarter of 2014 at Stanford University.

For the remainder of this post, let \\(\Sigma\\) denote our alphabet.
Symbols from \\(\Sigma\\) will be read from and written to the tapes of all the
Turing machines we discuss from now on. Furthermore, a *language* is defined to
be some set of strings (finite sequences) of symbols in \\(\Sigma\\).
Finally, let \\(|x|\\) denote the length of the string \\(x\\).

A language \\(L\\) is said to be in complexity class \\(P\\) if and only if
there exists some deterministic Turing machine \\(A\\) and polynomial function
\\(g\\) satisfying the following conditions:
let \\(x\\) be a string of symbols in \\(\Sigma\\), and let \\(n\\) be the length
of \\(x\\). Then if \\(A\\) is run with \\(x\\) on its input tape, \\(A\\) will
terminate in an accepting state if \\(x \in L\\) and a failing state otherwise.
Furthermore, \\(A\\) must terminate after making a number of transitions (moves)
that is at most \\(g(n)\\).

Similarly, a language \\(L\\) is said to be in complexity class \\(NP\\) if and
only if there exists some *nondeterministic* Turing machine \\(A\\) and
polynomial \\(g\\) such that, given as input any string \\(x\\) of length
\\(n\\), \\(A\\) can decide whether \\(x \in L\\) after making a number of
transitions (moves) that is at most \\(g(n)\\).

Professor Aaronson likes to talk about *problems* (specifically decision
problems) being in \\(P\\) or \\(NP\\). How can we reconcile the notion of a
problem being in a particular complexity class with our above definition of
complexity classes as sets of languages? Basically, we do so by mapping
problems to languages.

Let us take a concrete example, such as 3-SAT. The
problem here is, given a sequence of Boolean clauses, each of which is the
disjunction (or-ing together) of at most three Boolean variables, decide
whether there exists an assignment of truth values to each Boolean variable
such that all the clauses are satisfied. We can construct a corresponding
language as follows. Take the alphabet
$$ \Sigma = \left\{ 0, 1, ‚ê£, \neg, \wedge \right\} $$
An instance of Professor Aaronson's 3-SAT problem can be encoded as a string in
this alphabet as follows:

    1. Encode the name of each Boolean variable as a distinct binary number.

    2. Encode each clause by mapping each variable in that clause
       to its binary representation from step 1, prefixed with the \\(\neg\\) symbol if that
       variable is negated in the clause. The distinct variable representations within
       a clause are separated by using the space symbol.

    3. Concatenate all the encoded clauses together, separating them with the
       \\(\wedge\\) symbol.

It should be intuitively clear how to go from such an encoding back to an
instance of the original 3-SAT problem as defined by Aaronson: simply split up
the string of symbols on the \\(\wedge\\) character to get the individual
clauses; then map each distinct binary number to a distinct Boolean variable
(negating as necessary) to get each individual clause.

We define the language \\(3SAT\\) to be the set of all strings \\(x\\) of
symbols from \\(\Sigma\\) such that:
    1. \\(x\\) is a valid encoding (as defined above), and
    2. The instance of Aaronson's 3-SAT problem encoded by \\(x\\) is
       satisfiable.

Now the decision problem of determining whether a particular sequence of
clauses is satisfiable (Aaronson's formulation of 3-SAT) is exactly the problem
of determining whether a particular string is in the language \\(3SAT\\) (our
formulation).

So we have shown that our definition of complexity classes as sets of languages
is equivalent to Professor Aaronson's. Now we come to the meat of this post:
the lemma which lets us define the class \\(NP\\) without recourse to the
notion of a nondeterministic Turing machine.

<div class="lemma" markdown="1">
A language \\(L\\) is in complexity class \\(NP\\) if and only if there exists
a deterministic Turing machine \\(D\\) and polynomial \\(q ( \cdot )\\) such
that, for every string \\(x \in L\\), there exists a string \\(y\\) whose
length is at most \\(q(|x|)\\) and \\(D\\) accepts \\(x \| y\\) (i.e., \\(x\\)
and \\(y\\) concatenated together) in polynomial time.
</div>

<div class="proof" markdown="1">
Intuitively, the content of this lemma is that a language \\(L\\) is in
\\(NP\\) if and only if, for each string \\(x\\) in the language, there is a
proof (called a *certificate*) that the string is in the language, which can be
verified in deterministic polynomial time. This proof is what is represented by
the string \\(y\\) in the statement of the lemma above.

First, suppose that \\(L\\) is in \\(NP\\). Then, for any string \\(x \in L\\),
we know that there exists some nondeterministic Turing machine \\(A\\)
that accepts \\(x\\) in polynomial time. But we know that a nondeterministic
Turing machine is one that, at every step, has a choice  of which
state to transition to. Moreover, we know that since \\(A\\) terminates in
polynomial time, it makes at most a polynomial number of such choices.
So we can choose the string \\(y\\) to encode which choices \\(A\\) made
when deciding \\(x\\). A deterministic Turing machine can then take \\(x\\)
and \\(y\\) and simulate running \\(A\\) on \\(x\\), while making the decisions
encoded in \\(y\\) whenever it comes to a "fork in the road", so to speak.
This deterministic Turing machine will halt in polynomial time and will
accept (since by assumption \\(A\\) accepted \\(x\\)). Hence the "only if"
direction of the lemma is proven.

Now we will show the reverse direction. Suppose that there exists a
deterministic Turing machine \\(D\\) such that, for all \\(x \in L\\), there
exists a string \\(y\\) and \\(D\\) accepts \\(x \| y\\) in polynomial time.
Then we can come up with a nondeterministic Turing machine that decides
\\(x \in L\\) in (nondeterministic) polynomial time as follows: given as input
any string \\(x\\), nondeterministically choose every possible value of
\\(y\\) and then simulate running \\(D\\) on \\(x \| y\\). If any of those
choices lead to an accepting state, then decide \\(x \in L\\). Otherwise,
output \\(x \not\in L\\).

Since the length of \\(y\\) is bounded above by a known polynomial \\(q\\) of
the length of \\(x\\), there are only finitely many possible choices for
\\(y\\) and hence this construction is certainly finite and hence this
construction yields a valid nondeterministic Turing machine. Furthermore, since
each computation path (after choosing a value of \\(y\\)) simply simulates a
deterministic polynomial time Turing machine (namely \\(D\\)), this constructed
nondeterministic Turing machine which decides \\(L\\) runs in nondeterministic
polynomial time.  Hence, by definition, the language \\(L\\) is in \\(NP\\).
</div>




So we have shown that the \\(NP\\) languages are precisely those languages
\\(L\\) whose elements have a "proof" that they are in \\(L\\), which proof is
verifiable in polynomial time by a deterministic Turing machine. Returning to
the framing of complexity classes in terms of decision problems, what this
means is that a solvable instance of an \\(NP\\) decision problem has a proof
of solvability which can be verified "easily". Taking 3-SAT, for example, a
proof of solvability would be an assignment of truth values to each of the
Boolean variables. Given a satisfying assignment, one can verify that all the
clauses are satisfied in polynomial (indeed, linear) time, by simply iterating
through all the clauses and computing their truth values under the putatively
satisfying assignment. Other \\(NP\\) problems, such as subset sum, can be
efficiently verified similarly.
