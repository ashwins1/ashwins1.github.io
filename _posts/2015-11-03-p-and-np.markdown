---
layout: post
title:  "What are P and NP?"
date:   2015-11-03 20:17:44 -0800
categories: math quantum
---

<head>
    <script type="text/javascript"
            src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
    </script>
</head>

This first post will work through some of the exercises in Chapter 6 of
*Quantum Computing Since Democritus*, entitled "P, NP, and Friends".
Unfortunately for my readers, I worked through Chapters 1 through 5 before
MaBloWriMo.

This post assumes that the notion of a Turing machine has been defined. We will
start with the definitions of complexity classes \\(P\\) and \\(NP\\). In
contrast to Professor Aaronson, I will motivate the definitions of these two
complexity classes by first defining \\(P\\) and \\(NP\\) languages (i.e., sets
of strings of symbols in some alphabet).

$$a^2 + b^2 = c^2$$

A language \\(L\\) is said to be in complexity class \\(P\\) if and only if there
exists some Turing machine \\(A\\) which, given as input any string \\(x\\)
whose length is denoted \\(n\\), can decide whether \\(x \in L\\) after making
a number of transitions (moves) that is at most some polynomial function of
\\(n\\).
